//CPU Scheduling Using FCFS Algorithm
import java.util.Scanner;
class Fcfs{
    static void waitTime(int processes[], int n,
            int bt[], int wt[]) {
        
        wt[0] = 0;
 
        
        for (int i = 1; i < n; i++) {
            wt[i] = bt[i - 1] + wt[i - 1];
        }
    }
    
      static void turnAroundTime(int processes[], int n,
            int bt[], int wt[], int tat[]) {
        
        for (int i = 0; i < n; i++) {
            tat[i] = bt[i] + wt[i];
        }
        
        }static void findavgTime(int processes[], int n, int bt[]) {
        int wt[] = new int[n], tat[] = new int[n];
        int total_wt = 0, total_tat = 0;
 
        
        waitTime(processes, n, bt, wt);
 
        
       turnAroundTime(processes, n, bt, wt, tat);
 
        
        System.out.printf("Processes Burst time Waiting"
                       +" time Turn around time\n");
 
        
        for (int i = 0; i < n; i++) {
            total_wt = total_wt + wt[i];
            total_tat = total_tat + tat[i];
            System.out.printf(" %d ", (i + 1));
            System.out.printf("     %d ", bt[i]);
            System.out.printf("     %d", wt[i]);
            System.out.printf("     %d\n", tat[i]);
        }
        float s = (float)total_wt /(float) n;
        int t = total_tat / n;
        System.out.printf("Average waiting time = %f", s);
        System.out.printf("\n");
        System.out.printf("Average turn around time = %d ", t);
    }
    
}
public class Main
{
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    System.out.println("Enter the number of process : ");
	    
		int noP = sc.nextInt();
		int [] process = new int[noP];
		int [] burstTime = new int[noP];
		
		for(int i=0;i<noP;i++){
		    System.out.print("Enter the process number : ");
		    int x = sc.nextInt();
		    process[i] = x;
		    System.out.print("Enter the burst time : "+(i+1)+" : ");
		    int x1 = sc.nextInt();
		    burstTime[i] = x1;
		    
		    
		}
		    Fcfs p1 = new Fcfs();
		    p1.findavgTime(process, noP, burstTime);
	}
}
