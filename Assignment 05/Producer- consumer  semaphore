import java.util.concurrent.*;
class Q{
    int n;
    static Semaphore scon = new Semaphore(0);
    static Semaphore spod = new Semaphore(1);
    // consumer is taking the element
    void get(){
        try {
            scon.acquire();//consumer is in charge 
            
        } catch(InterruptedException e) {
            System.out.println("InterruptedException caught");
        }
        System.out.println("Got: " + n);
        // The resources are released for producer 
        spod.release();
            
    }
    // add or producers adding elements 
    void put(int n){
        try {
            spod.acquire();// producer is in charge
        } catch(InterruptedException e) {
            System.out.println("InterruptedException caught");
        }
        this.n = n;
        System.out.println("Put: " + n);
        // The resources are released for consumer
        scon.release();
    }
}
class Pod implements Runnable{
    Q q;
    Pod( Q q){
        this.q = q;
        new Thread(this, "Producer").start();
    }public void run(){
        for (int i=0;i<20 ;i++ ){
            q.put(i);
        } 
    }
}
// code by vjk
class Con implements Runnable{
    Q q;
    Con( Q q){
        this.q = q;
        new Thread(this, "consumer").start();
    }public void run(){
        for (int i=0;i<20 ;i++ ){
            q.get();
        } 
    }
}
// code by viki 
public class Main
{
	public static void main(String[] args) {
		Q q = new Q();
		new Pod(q);
		new Con(q);
	}
}
